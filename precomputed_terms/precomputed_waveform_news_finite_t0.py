
# =========================================================================
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.
#
# Generated by: generate_all_waveform_modules.py
# Contains pre-computed waveform functions for n_max from 0 to 10.
# Each function is optimized with CSE and JIT-compiled with Numba.
#
# Model Used: news_finite_t0
# =========================================================================
import numpy as np
import numba
from scipy.special import expi 
# -------------------------------------------------------------------------
# Individual implementations for each n_max value
# -------------------------------------------------------------------------

@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n0(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 0."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = Omega0**2 - x3
    x5 = np.tanh(x0*(t0 + x1)) - 1
    x6 = math.sqrt(x3 + x4*(np.tanh(x2) - 1)/x5)
    x7 = math.sqrt(-x3 + 2*x4/x5)
    return -1j*Ap*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x6)/np.abs(Omega_QNM - x6)) + Phi_0 - tau*x7*np.arctan(x6/x7)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))/x6


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n1(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 1."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = np.tanh(x0*(t0 + x1)) - 1
    x6 = Omega0**2 - x3
    x7 = x6/x5
    x8 = x3 + x7*(x4 - 1)
    x9 = math.sqrt(x8)
    x10 = 1/x8
    x11 = math.sqrt(-x3 + 2*x6/x5)
    return -Ap*((1/2)*x0*x10*(-x10*x7*(x4**2 - 1) + 2*x4) + 1j/x9)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x9)/np.abs(Omega_QNM - x9)) + Phi_0 - tau*x11*np.arctan(x9/x11)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n2(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 2."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x11*x13
    x19 = x18*x5 + x3
    x20 = -x17
    return -Ap*((1/2)*x0*x15*(-x15*x17*x8 + 2*x4) + 1j/x10 - 1/4*1j*x15*(3*x11**2*x20**2/(x12**2*x19**2) + 8*x16 + 8*x18*x20*x4/x19 - 4)/(tau**2*math.sqrt(x19)))*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n3(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 3."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = x11*x13
    x21 = x20*x5 + x3
    x22 = -x17
    x23 = x9**(-2)
    x24 = x17**2
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*1j*x15*(3*x11**2*x22**2/(x12**2*x21**2) + 8*x16 + 8*x20*x22*x4/x21 - 4)/(tau**2*math.sqrt(x21)) - 1/8*x23*(-52*x16*x19 - 15*x17**3*x7**3/(x6**3*x9**3) + 40*x17*x4 - 20*x18*x24 + 54*x23*x24*x4*x7**2/x6**2 + 8*x4**3)/tau**3)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n4(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 4."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = 1/x23
    x27 = x22*x26*x4
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x20**3
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 8*x20*x27 + 3*x25 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 - 15*x17**3*x7**3/(x6**3*x9**3) + 40*x17*x4 - 20*x18*x31 + 54*x29*x31*x4*x7**2/x6**2 + 8*x30)/tau**3 + (1/16)*x28*x29*(105*x11**4*x20**4/(x12**4*x23**4) + 480*x11**3*x32*x4/(x12**3*x23**3) - 288*x16*x20 + 696*x16*x25 + 320*x20*x22*x26*x30 - 448*x21*x27 + 80*x21 - 168*x24*x32 + 16*x4**4)/tau**4)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n5(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 5."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = 1/x23
    x27 = x22*x26*x4
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x18*x31
    x33 = x17**3
    x34 = x9**(-3)
    x35 = x34*x7**3/x6**3
    x36 = x33*x35
    x37 = x7**2
    x38 = x6**(-2)
    x39 = x4**4
    x40 = x20**3
    x41 = x17**4
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 8*x20*x27 + 3*x25 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 + 40*x17*x4 + 54*x29*x31*x37*x38*x4 + 8*x30 - 20*x32 - 15*x36)/tau**3 + (1/16)*x28*x29*(105*x11**4*x20**4/(x12**4*x23**4) + 480*x11**3*x4*x40/(x12**3*x23**3) - 288*x16*x20 + 696*x16*x25 + 320*x20*x22*x26*x30 - 448*x21*x27 + 80*x21 - 168*x24*x40 + 16*x39)/tau**4 + (1/32)*x34*(-6688*x16*x32 - 10200*x16*x36 - 945*x17**5*x7**5/(x6**5*x9**5) + 1856*x17*x30 - 976*x18*x33 - 1936*x19*x39 + 7920*x29*x30*x31*x37*x38 + 6480*x29*x33*x37*x38*x4 + 1952*x31*x4 - 1800*x35*x41 + 32*x4**5 + 5250*x4*x41*x7**4/(x6**4*x9**4))/tau**5)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n6(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 6."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = x22/x23
    x27 = x20*x26
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x18*x31
    x33 = x17**3
    x34 = x9**(-3)
    x35 = x34*x7**3/x6**3
    x36 = x33*x35
    x37 = x7**2
    x38 = x6**(-2)
    x39 = x4**4
    x40 = x20**3
    x41 = x24*x40
    x42 = x20**4
    x43 = x11**4/(x12**4*x23**4)
    x44 = x42*x43
    x45 = x21*x26
    x46 = x11**3/(x12**3*x23**3)
    x47 = x4*x46
    x48 = x16*x21
    x49 = x4**5
    x50 = x17**4
    x51 = x20**5
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 3*x25 + 8*x27*x4 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 + 40*x17*x4 + 54*x29*x31*x37*x38*x4 + 8*x30 - 20*x32 - 15*x36)/tau**3 + (1/16)*x28*x29*(-288*x16*x20 + 80*x21 + 696*x24*x48 + 320*x27*x30 + 16*x39 - 448*x4*x45 + 480*x40*x47 - 168*x41 + 105*x44)/tau**4 + (1/32)*x34*(-6688*x16*x32 - 10200*x16*x36 - 945*x17**5*x7**5/(x6**5*x9**5) + 1856*x17*x30 - 976*x18*x33 - 1936*x19*x39 + 7920*x29*x30*x31*x37*x38 + 6480*x29*x33*x37*x38*x4 + 1952*x31*x4 - 1800*x35*x50 + 5250*x4*x50*x7**4/(x6**4*x9**4) + 32*x49)/tau**5 - 1/64*x28*x34*(10395*x11**6*x20**6/(x12**6*x23**6) + 68040*x11**5*x4*x51/(x12**5*x23**5) - 158304*x16*x41 + 165900*x16*x44 - 11456*x20*x39 + 15888*x24*x42 + 85008*x25*x39 + 42368*x26*x4*x40 + 11648*x27*x49 + 182400*x30*x40*x46 - 84224*x30*x45 + 64*x4**6 - 3904*x40 - 105600*x42*x47 - 23100*x43*x51 + 30656*x48)/tau**6)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n7(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 7."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = x22/x23
    x27 = x20*x26
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x18*x31
    x33 = x17**3
    x34 = x9**(-3)
    x35 = x34*x7**3/x6**3
    x36 = x33*x35
    x37 = x7**2
    x38 = x6**(-2)
    x39 = x4**4
    x40 = x20**3
    x41 = x24*x40
    x42 = x20**4
    x43 = x11**4/(x12**4*x23**4)
    x44 = x42*x43
    x45 = x21*x26
    x46 = x11**3/(x12**3*x23**3)
    x47 = x4*x46
    x48 = x16*x21
    x49 = x4**5
    x50 = x18*x33
    x51 = x17**4
    x52 = x35*x51
    x53 = x17**5
    x54 = x7**5/(x6**5*x9**5)
    x55 = x53*x54
    x56 = x7**4
    x57 = x6**(-4)
    x58 = x9**(-4)
    x59 = x4**6
    x60 = x20**5
    x61 = x17**6
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 3*x25 + 8*x27*x4 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 + 40*x17*x4 + 54*x29*x31*x37*x38*x4 + 8*x30 - 20*x32 - 15*x36)/tau**3 + (1/16)*x28*x29*(-288*x16*x20 + 80*x21 + 696*x24*x48 + 320*x27*x30 + 16*x39 - 448*x4*x45 + 480*x40*x47 - 168*x41 + 105*x44)/tau**4 + (1/32)*x34*(-6688*x16*x32 - 10200*x16*x36 + 1856*x17*x30 - 1936*x19*x39 + 7920*x29*x30*x31*x37*x38 + 6480*x29*x33*x37*x38*x4 + 1952*x31*x4 + 5250*x4*x51*x56*x57*x58 + 32*x49 - 976*x50 - 1800*x52 - 945*x55)/tau**5 - 1/64*x28*x34*(10395*x11**6*x20**6/(x12**6*x23**6) + 68040*x11**5*x4*x60/(x12**5*x23**5) - 158304*x16*x41 + 165900*x16*x44 - 11456*x20*x39 + 15888*x24*x42 + 85008*x25*x39 + 42368*x26*x4*x40 + 11648*x27*x49 + 182400*x30*x40*x46 - 84224*x30*x45 - 3904*x40 - 105600*x42*x47 - 23100*x43*x60 + 30656*x48 + 64*x59)/tau**6 - 1/128*x58*(-1129152*x16*x50 - 3786720*x16*x52 - 2989980*x16*x55 - 135135*x17**7*x7**7/(x6**7*x9**7) + 69504*x17*x49 - 88640*x18*x51 - 69952*x19*x59 + 3148992*x29*x30*x33*x37*x38 + 885024*x29*x31*x37*x38*x49 + 1046304*x29*x37*x38*x4*x51 + 398208*x30*x31 + 4263000*x30*x51*x56*x57*x58 - 970176*x32*x39 + 177280*x33*x4 - 290640*x35*x53 - 2978640*x36*x39 + 128*x4**7 + 1911000*x4*x53*x56*x57*x58 + 1018710*x4*x61*x7**6/(x6**6*x9**6) - 343980*x54*x61)/tau**7)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n8(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 8."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = x22/x23
    x27 = x20*x26
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x18*x31
    x33 = x17**3
    x34 = x9**(-3)
    x35 = x34*x7**3/x6**3
    x36 = x33*x35
    x37 = x7**2
    x38 = x6**(-2)
    x39 = x4**4
    x40 = x20**3
    x41 = x24*x40
    x42 = x20**4
    x43 = x11**4/(x12**4*x23**4)
    x44 = x42*x43
    x45 = x21*x26
    x46 = x11**3/(x12**3*x23**3)
    x47 = x4*x40
    x48 = x16*x21
    x49 = x4**5
    x50 = x18*x33
    x51 = x17**4
    x52 = x35*x51
    x53 = x17**5
    x54 = x7**5/(x6**5*x9**5)
    x55 = x53*x54
    x56 = x7**4
    x57 = x6**(-4)
    x58 = x9**(-4)
    x59 = x4**6
    x60 = x24*x42
    x61 = x20**5
    x62 = x43*x61
    x63 = x20**6
    x64 = x11**6/(x12**6*x23**6)
    x65 = x63*x64
    x66 = x4*x42
    x67 = x4*x61
    x68 = x11**5/(x12**5*x23**5)
    x69 = x21*x39
    x70 = x30*x46
    x71 = x16*x40
    x72 = x4**7
    x73 = x17**6
    x74 = x20**7
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 3*x25 + 8*x27*x4 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 + 40*x17*x4 + 54*x29*x31*x37*x38*x4 + 8*x30 - 20*x32 - 15*x36)/tau**3 + (1/16)*x28*x29*(-288*x16*x20 + 80*x21 + 696*x24*x48 + 320*x27*x30 + 16*x39 - 448*x4*x45 - 168*x41 + 105*x44 + 480*x46*x47)/tau**4 + (1/32)*x34*(-6688*x16*x32 - 10200*x16*x36 + 1856*x17*x30 - 1936*x19*x39 + 7920*x29*x30*x31*x37*x38 + 6480*x29*x33*x37*x38*x4 + 1952*x31*x4 + 5250*x4*x51*x56*x57*x58 + 32*x49 - 976*x50 - 1800*x52 - 945*x55)/tau**5 - 1/64*x28*x34*(165900*x16*x44 - 11456*x20*x39 + 85008*x24*x69 - 158304*x24*x71 + 42368*x26*x47 + 11648*x27*x49 - 84224*x30*x45 + 182400*x40*x70 - 3904*x40 - 105600*x46*x66 + 30656*x48 + 64*x59 + 15888*x60 - 23100*x62 + 10395*x65 + 68040*x67*x68)/tau**6 - 1/128*x58*(-1129152*x16*x50 - 3786720*x16*x52 - 2989980*x16*x55 - 135135*x17**7*x7**7/(x6**7*x9**7) + 69504*x17*x49 - 88640*x18*x51 - 69952*x19*x59 + 3148992*x29*x30*x33*x37*x38 + 885024*x29*x31*x37*x38*x49 + 1046304*x29*x37*x38*x4*x51 + 398208*x30*x31 + 4263000*x30*x51*x56*x57*x58 - 970176*x32*x39 + 177280*x33*x4 - 290640*x35*x53 - 2978640*x36*x39 + 1911000*x4*x53*x56*x57*x58 + 1018710*x4*x7**6*x73/(x6**6*x9**6) - 343980*x54*x73 + 128*x72)/tau**7 + (1/256)*x28*x58*(2027025*x11**8*x20**8/(x12**8*x23**8) + 17297280*x11**7*x4*x74/(x12**7*x23**7) + 41114880*x16*x60 - 94127040*x16*x62 + 59376240*x16*x65 - 418816*x20*x59 - 2358528*x24*x61 + 9060096*x25*x59 + 23967744*x26*x30*x40 - 6289408*x26*x66 + 419840*x27*x72 + 104146560*x30*x61*x68 - 55846656*x39*x41 + 97584480*x39*x44 + 256*x4**8 - 38102400*x4*x63*x68 + 46126080*x40*x46*x49 - 107735040*x42*x70 + 354560*x42 + 5856480*x43*x63 - 10610688*x45*x49 + 26772480*x46*x67 - 5821200*x64*x74 + 4677120*x69 - 4871168*x71)/tau**8)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n9(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 9."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = x22/x23
    x27 = x20*x26
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x18*x31
    x33 = x17**3
    x34 = x9**(-3)
    x35 = x34*x7**3/x6**3
    x36 = x33*x35
    x37 = x7**2
    x38 = x6**(-2)
    x39 = x4**4
    x40 = x20**3
    x41 = x24*x40
    x42 = x20**4
    x43 = x11**4/(x12**4*x23**4)
    x44 = x42*x43
    x45 = x21*x26
    x46 = x11**3/(x12**3*x23**3)
    x47 = x4*x40
    x48 = x16*x21
    x49 = x4**5
    x50 = x18*x33
    x51 = x17**4
    x52 = x35*x51
    x53 = x17**5
    x54 = x9**(-5)
    x55 = x54*x7**5/x6**5
    x56 = x53*x55
    x57 = x7**4
    x58 = x6**(-4)
    x59 = x9**(-4)
    x60 = x4**6
    x61 = x24*x42
    x62 = x20**5
    x63 = x43*x62
    x64 = x20**6
    x65 = x11**6/(x12**6*x23**6)
    x66 = x64*x65
    x67 = x4*x42
    x68 = x4*x62
    x69 = x11**5/(x12**5*x23**5)
    x70 = x21*x39
    x71 = x30*x46
    x72 = x16*x40
    x73 = x4**7
    x74 = x18*x51
    x75 = x35*x53
    x76 = x17**6
    x77 = x55*x76
    x78 = x17**7
    x79 = x7**7/(x6**7*x9**7)
    x80 = x78*x79
    x81 = x7**6
    x82 = x6**(-6)
    x83 = x9**(-6)
    x84 = x4**8
    x85 = x20**7
    x86 = x17**8
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 3*x25 + 8*x27*x4 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 + 40*x17*x4 + 54*x29*x31*x37*x38*x4 + 8*x30 - 20*x32 - 15*x36)/tau**3 + (1/16)*x28*x29*(-288*x16*x20 + 80*x21 + 696*x24*x48 + 320*x27*x30 + 16*x39 - 448*x4*x45 - 168*x41 + 105*x44 + 480*x46*x47)/tau**4 + (1/32)*x34*(-6688*x16*x32 - 10200*x16*x36 + 1856*x17*x30 - 1936*x19*x39 + 7920*x29*x30*x31*x37*x38 + 6480*x29*x33*x37*x38*x4 + 1952*x31*x4 + 5250*x4*x51*x57*x58*x59 + 32*x49 - 976*x50 - 1800*x52 - 945*x56)/tau**5 - 1/64*x28*x34*(165900*x16*x44 - 11456*x20*x39 + 85008*x24*x70 - 158304*x24*x72 + 42368*x26*x47 + 11648*x27*x49 - 84224*x30*x45 + 182400*x40*x71 - 3904*x40 - 105600*x46*x67 + 30656*x48 + 64*x60 + 15888*x61 - 23100*x63 + 10395*x66 + 68040*x68*x69)/tau**6 - 1/128*x59*(-1129152*x16*x50 - 3786720*x16*x52 - 2989980*x16*x56 + 69504*x17*x49 - 69952*x19*x60 + 3148992*x29*x30*x33*x37*x38 + 885024*x29*x31*x37*x38*x49 + 1046304*x29*x37*x38*x4*x51 + 398208*x30*x31 + 4263000*x30*x51*x57*x58*x59 - 970176*x32*x39 + 177280*x33*x4 - 2978640*x36*x39 + 1911000*x4*x53*x57*x58*x59 + 1018710*x4*x76*x81*x82*x83 + 128*x73 - 88640*x74 - 290640*x75 - 343980*x77 - 135135*x80)/tau**7 + (1/256)*x28*x59*(2027025*x11**8*x20**8/(x12**8*x23**8) + 17297280*x11**7*x4*x85/(x12**7*x23**7) + 41114880*x16*x61 - 94127040*x16*x63 + 59376240*x16*x66 - 418816*x20*x60 - 2358528*x24*x62 + 9060096*x25*x60 + 23967744*x26*x30*x40 - 6289408*x26*x67 + 419840*x27*x73 + 104146560*x30*x62*x69 - 55846656*x39*x41 + 97584480*x39*x44 - 38102400*x4*x64*x69 + 46126080*x40*x46*x49 - 107735040*x42*x71 + 354560*x42 + 5856480*x43*x64 - 10610688*x45*x49 + 26772480*x46*x68 - 5821200*x65*x85 + 4677120*x70 - 4871168*x72 + 256*x84)/tau**8 + (1/512)*x54*(-261886976*x16*x74 - 1440979200*x16*x75 - 2462685120*x16*x77 - 1290809520*x16*x80 - 34459425*x17**9*x7**9/(x6**9*x9**9) + 2516992*x17*x73 - 12933376*x18*x53 - 2519296*x19*x84 + 1258744320*x29*x30*x37*x38*x51 + 91860480*x29*x31*x37*x38*x73 + 922406400*x29*x33*x37*x38*x49 + 235215360*x29*x37*x38*x4*x53 + 105613312*x30*x33 + 3605616000*x30*x53*x57*x58*x59 + 2689394400*x30*x76*x81*x82*x83 + 51796992*x31*x49 - 112403456*x32*x60 - 65337600*x35*x76 - 691065600*x36*x60 - 446332416*x39*x50 - 2679724800*x39*x52 - 3169484640*x39*x56 + 512*x4**9 + 25866752*x4*x51 + 716184000*x4*x57*x58*x59*x76 + 831267360*x4*x78*x81*x82*x83 + 328378050*x4*x7**8*x86/(x6**8*x9**8) + 2079403200*x49*x51*x57*x58*x59 - 128913120*x55*x78 - 110270160*x79*x86)/tau**9)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n10(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 10."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega_QNM**2
    x4 = np.tanh(x2)
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = Omega0**2 - x3
    x8 = x7/x6
    x9 = x3 + x5*x8
    x10 = math.sqrt(x9)
    x11 = -x7
    x12 = -x6
    x13 = 1/x12
    x14 = math.sqrt(2*x11*x13 - x3)
    x15 = 1/x9
    x16 = x4**2
    x17 = x16 - 1
    x18 = x15*x8
    x19 = x17*x18
    x20 = -x17
    x21 = x20**2
    x22 = x11*x13
    x23 = x22*x5 + x3
    x24 = x11**2/(x12**2*x23**2)
    x25 = x21*x24
    x26 = x22/x23
    x27 = x20*x26
    x28 = 1j/math.sqrt(x23)
    x29 = x9**(-2)
    x30 = x4**3
    x31 = x17**2
    x32 = x18*x31
    x33 = x17**3
    x34 = x9**(-3)
    x35 = x34*x7**3/x6**3
    x36 = x33*x35
    x37 = x7**2
    x38 = x6**(-2)
    x39 = x4**4
    x40 = x20**3
    x41 = x24*x40
    x42 = x20**4
    x43 = x11**4/(x12**4*x23**4)
    x44 = x42*x43
    x45 = x26*x4
    x46 = x11**3/(x12**3*x23**3)
    x47 = x40*x46
    x48 = x16*x21
    x49 = x4**5
    x50 = x18*x33
    x51 = x17**4
    x52 = x35*x51
    x53 = x17**5
    x54 = x9**(-5)
    x55 = x54*x7**5/x6**5
    x56 = x53*x55
    x57 = x7**4
    x58 = x6**(-4)
    x59 = x9**(-4)
    x60 = x4**6
    x61 = x24*x42
    x62 = x20**5
    x63 = x43*x62
    x64 = x20**6
    x65 = x11**6/(x12**6*x23**6)
    x66 = x64*x65
    x67 = x26*x30
    x68 = x4*x42
    x69 = x4*x62
    x70 = x11**5/(x12**5*x23**5)
    x71 = x21*x39
    x72 = x16*x40
    x73 = x16*x42
    x74 = x4**7
    x75 = x18*x51
    x76 = x35*x53
    x77 = x17**6
    x78 = x55*x77
    x79 = x17**7
    x80 = x7**7/(x6**7*x9**7)
    x81 = x79*x80
    x82 = x7**6
    x83 = x6**(-6)
    x84 = x9**(-6)
    x85 = x4**8
    x86 = x24*x62
    x87 = x43*x64
    x88 = x20**7
    x89 = x65*x88
    x90 = x20**8
    x91 = x11**8/(x12**8*x23**8)
    x92 = x90*x91
    x93 = x21*x26
    x94 = x64*x70
    x95 = x11**7/(x12**7*x23**7)
    x96 = x4*x95
    x97 = x21*x60
    x98 = x39*x40
    x99 = x42*x46
    x100 = x30*x62
    x101 = x4**9
    x102 = x17**8
    x103 = x20**9
    return -Ap*((1/2)*x0*x15*(-x19 + 2*x4) + 1j/x10 - 1/4*x15*x28*(8*x16 + 3*x25 + 8*x27*x4 - 4)/tau**2 - 1/8*x29*(-52*x16*x19 + 40*x17*x4 + 54*x29*x31*x37*x38*x4 + 8*x30 - 20*x32 - 15*x36)/tau**3 + (1/16)*x28*x29*(-288*x16*x20 - 448*x21*x45 + 80*x21 + 696*x24*x48 + 320*x27*x30 + 16*x39 + 480*x4*x47 - 168*x41 + 105*x44)/tau**4 + (1/32)*x34*(-6688*x16*x32 - 10200*x16*x36 + 1856*x17*x30 - 1936*x19*x39 + 7920*x29*x30*x31*x37*x38 + 6480*x29*x33*x37*x38*x4 + 1952*x31*x4 + 5250*x4*x51*x57*x58*x59 + 32*x49 - 976*x50 - 1800*x52 - 945*x56)/tau**5 - 1/64*x28*x34*(-11456*x20*x39 - 84224*x21*x67 + 85008*x24*x71 - 158304*x24*x72 + 11648*x27*x49 + 182400*x30*x47 + 42368*x40*x45 - 3904*x40 + 165900*x43*x73 - 105600*x46*x68 + 30656*x48 + 64*x60 + 15888*x61 - 23100*x63 + 10395*x66 + 68040*x69*x70)/tau**6 - 1/128*x59*(-1129152*x16*x50 - 3786720*x16*x52 - 2989980*x16*x56 + 69504*x17*x49 - 69952*x19*x60 + 3148992*x29*x30*x33*x37*x38 + 885024*x29*x31*x37*x38*x49 + 1046304*x29*x37*x38*x4*x51 + 398208*x30*x31 + 4263000*x30*x51*x57*x58*x59 - 970176*x32*x39 + 177280*x33*x4 - 2978640*x36*x39 + 1911000*x4*x53*x57*x58*x59 + 1018710*x4*x77*x82*x83*x84 + 128*x74 - 88640*x75 - 290640*x76 - 343980*x78 - 135135*x81)/tau**7 + (1/256)*x28*x59*(104146560*x100*x70 - 94127040*x16*x63 + 59376240*x16*x66 - 418816*x20*x60 + 41114880*x24*x73 + 9060096*x24*x97 - 55846656*x24*x98 - 6289408*x26*x68 + 419840*x27*x74 - 107735040*x30*x99 + 97584480*x39*x44 - 38102400*x4*x94 + 23967744*x40*x67 + 354560*x42 + 26772480*x46*x69 + 46126080*x47*x49 - 10610688*x49*x93 + 4677120*x71 - 4871168*x72 + 256*x85 - 2358528*x86 + 5856480*x87 + 17297280*x88*x96 - 5821200*x89 + 2027025*x92)/tau**8 + (1/512)*x54*(512*x101 + 328378050*x102*x4*x7**8/(x6**8*x9**8) - 110270160*x102*x80 - 261886976*x16*x75 - 1440979200*x16*x76 - 2462685120*x16*x78 - 1290809520*x16*x81 - 34459425*x17**9*x7**9/(x6**9*x9**9) + 2516992*x17*x74 - 12933376*x18*x53 - 2519296*x19*x85 + 1258744320*x29*x30*x37*x38*x51 + 91860480*x29*x31*x37*x38*x74 + 922406400*x29*x33*x37*x38*x49 + 235215360*x29*x37*x38*x4*x53 + 105613312*x30*x33 + 3605616000*x30*x53*x57*x58*x59 + 2689394400*x30*x77*x82*x83*x84 + 51796992*x31*x49 - 112403456*x32*x60 - 65337600*x35*x77 - 691065600*x36*x60 - 446332416*x39*x50 - 2679724800*x39*x52 - 3169484640*x39*x56 + 25866752*x4*x51 + 716184000*x4*x57*x58*x59*x77 + 831267360*x4*x79*x82*x83*x84 + 2079403200*x49*x51*x57*x58*x59 - 128913120*x55*x79)/tau**9 - 1/1024*x28*x54*(59433062400*x100*x46 + 15116288*x101*x27 + 6891885000*x103*x11**9*x4/(x12**9*x23**9) - 2310808500*x103*x91 + 654729075*x11**10*x20**10/(x12**10*x23**10) - 13512864768*x16*x86 + 50341334400*x16*x87 - 68163923520*x16*x89 + 30526996500*x16*x92 - 15111168*x20*x85 + 509230848*x24*x64 + 926162688*x25*x85 + 7649292288*x26*x40*x49 + 73686412800*x30*x88*x95 - 121836234240*x30*x94 + 33220459008*x39*x61 - 118875657600*x39*x63 + 104788585440*x39*x66 + 1024*x4**10 - 8638771200*x4*x46*x64 + 20163790080*x4*x70*x88 - 14536946688*x41*x60 - 8390238208*x42*x67 - 1889731200*x43*x88 + 42266716800*x44*x60 + 1357948928*x45*x62 + 10134220800*x47*x74 + 88443290880*x49*x62*x70 - 61139865600*x49*x99 - 51733504*x62 + 3080579040*x65*x90 + 1099281408*x73 - 1166860288*x74*x93 - 19718899200*x90*x96 + 553207808*x97 - 1996556288*x98)/tau**10)*np.exp(1j*((1/2)*Omega_QNM*tau*np.log((Omega_QNM + x10)/np.abs(Omega_QNM - x10)) + Phi_0 - tau*x14*np.arctan(x10/x14)))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


# -------------------------------------------------------------------------
# Dispatcher to select the correct function at runtime
# -------------------------------------------------------------------------
_function_map = {
    0: _waveform_n0,
    1: _waveform_n1,
    2: _waveform_n2,
    3: _waveform_n3,
    4: _waveform_n4,
    5: _waveform_n5,
    6: _waveform_n6,
    7: _waveform_n7,
    8: _waveform_n8,
    9: _waveform_n9,
    10: _waveform_n10,
}

def get_precomputed_waveform(n_max, t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """
    Selects and evaluates the pre-computed waveform for a specific n_max.

    This is the main function to be called from other scripts. It dispatches
    to a pre-compiled, optimized function based on the n_max chosen.

    NOTE: The 't0' parameter is ignored by 'asymptotic' models but must still be
    provided for a consistent function signature.

    Args:
        n_max (int): The desired order of the expansion.
        ... (other parameters for the waveform)

    Returns:
        numpy.ndarray: The complex waveform values.
    """
    if n_max not in _function_map:
        raise ValueError(f"Invalid n_max: {n_max}. Available values are: {list(_function_map.keys())}")

    selected_func = _function_map[n_max]
    return selected_func(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0)

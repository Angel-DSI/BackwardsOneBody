
# =========================================================================
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.
#
# Generated by: generate_all_waveform_modules.py
# Contains pre-computed waveform functions for n_max from 0 to 10.
# Each function is optimized with CSE and JIT-compiled with Numba.
#
# Model Used: psi4_finite_t0
# =========================================================================
import numpy as np
import numba
from scipy.special import expi 
# -------------------------------------------------------------------------
# Individual implementations for each n_max value
# -------------------------------------------------------------------------

@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n0(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 0."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega0**4
    x4 = np.tanh(x0*(t0 + x1))
    x5 = (-Omega_QNM**4 + x3)/(x4 - 1)
    x6 = (x3 + x5*(-x4 + np.tanh(x2)))**(1/4)
    x7 = 1/Omega_QNM
    x8 = Omega0*x7
    x9 = x6*x7
    x10 = Omega_QNM*tau
    x11 = (x3 - x5*(x4 + 1))**(1/4)
    x12 = 1/x11
    x13 = Omega0*x12
    x14 = x12*x6
    x15 = tau*x11
    return -1j*Ap*np.exp(1j*(Phi_0 - x10*(np.arctan(x8) - np.arctan(x9)) - x10*(math.atanh(x8) - math.atanh(x9)) + x15*(np.arctan(x13) - np.arctan(x14)) + x15*(math.atanh(x13) - math.atanh(x14))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))/x6


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n1(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 1."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = Omega0**4
    x4 = np.tanh(x2)
    x5 = np.tanh(x0*(t0 + x1))
    x6 = (-Omega_QNM**4 + x3)/(x5 - 1)
    x7 = x3 + x6*(x4 - x5)
    x8 = x7**(1/4)
    x9 = 1/Omega_QNM
    x10 = Omega0*x9
    x11 = x8*x9
    x12 = Omega_QNM*tau
    x13 = (x3 - x6*(x5 + 1))**(1/4)
    x14 = 1/x13
    x15 = Omega0*x14
    x16 = x14*x8
    x17 = tau*x13
    return -Ap*((1/4)*x0*(4*x4 - x6*(x4**2 - 1)/x7)/math.sqrt(x7) + 1j/x8)*np.exp(1j*(Phi_0 - x12*(np.arctan(x10) - np.arctan(x11)) - x12*(math.atanh(x10) - math.atanh(x11)) + x17*(np.arctan(x15) - np.arctan(x16)) + x17*(math.atanh(x15) - math.atanh(x16))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n2(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 2."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = -x9
    x25 = -x10
    x26 = x25/x24
    x27 = x26*x8 + x5
    x28 = -x23
    return -Ap*((1/4)*x0*x21*(-x11*x23/x12 + 4*x6) + 1j/x13 - 1/16*1j*x21*(32*x22 + 16*x26*x28*x6/x27 - 16 + 5*x25**2*x28**2/(x24**2*x27**2))/(tau**2*x27**(1/4)))*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n3(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 3."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x9
    x28 = -x10
    x29 = x28/x27
    x30 = x29*x8 + x5
    x31 = -x23
    x32 = x23**2
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*1j*x21*(32*x22 + 16*x29*x31*x6/x30 - 16 + 5*x28**2*x31**2/(x27**2*x30**2))/(tau**2*x30**(1/4)) - 1/64*x24*(-45*x10**3*x23**3/(x12**3*x9**3) + 180*x10**2*x32*x6/(x12**2*x9**2) - 208*x22*x26 + 320*x23*x6 - 80*x25*x32 + 64*x6**3)/tau**3)*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n4(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 4."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = 1/x32
    x36 = x31*x35*x6
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x27**3
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 16*x27*x36 + 5*x34 - 16)/tau**2 - 1/64*x24*(-45*x10**3*x23**3/(x12**3*x9**3) + 180*x10**2*x39*x6/(x12**2*x9**2) - 208*x22*x26 + 320*x23*x6 - 80*x25*x39 + 64*x38)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 + 4640*x22*x34 + 585*x27**4*x30**4/(x29**4*x32**4) + 2560*x27*x31*x35*x38 - 3584*x28*x36 + 1280*x28 - 1120*x33*x40 + 256*x6**4 + 2880*x30**3*x40*x6/(x29**3*x32**3))/tau**4)*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n5(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 5."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = 1/x32
    x36 = x31*x35*x6
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x25*x39
    x41 = x23**3
    x42 = x10**3/(x12**3*x9**3)
    x43 = x41*x42
    x44 = x10**2
    x45 = x9**(-2)
    x46 = x12**(-2)
    x47 = x6**4
    x48 = x27**3
    x49 = x23**4
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 16*x27*x36 + 5*x34 - 16)/tau**2 - 1/64*x24*(-208*x22*x26 + 320*x23*x6 + 64*x38 + 180*x39*x44*x45*x46*x6 - 80*x40 - 45*x43)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 + 4640*x22*x34 + 585*x27**4*x30**4/(x29**4*x32**4) + 2560*x27*x31*x35*x38 - 3584*x28*x36 + 1280*x28 - 1120*x33*x48 + 256*x47 + 2880*x30**3*x48*x6/(x29**3*x32**3))/tau**4 + (1/1024)*(-9945*x10**5*x23**5/(x12**5*x9**5) + 58500*x10**4*x49*x6/(x12**4*x9**4) - 107008*x22*x40 - 122400*x22*x43 + 59392*x23*x38 - 15616*x25*x41 - 30976*x26*x47 + 105600*x38*x39*x44*x45*x46 + 62464*x39*x6 + 86400*x41*x44*x45*x46*x6 - 21600*x42*x49 + 1024*x6**5)/(tau**5*x12**(3/2)))*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n6(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 6."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = x31/x32
    x36 = x27*x35
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x25*x39
    x41 = x23**3
    x42 = x10**3/(x12**3*x9**3)
    x43 = x41*x42
    x44 = x10**2
    x45 = x9**(-2)
    x46 = x12**(-2)
    x47 = x6**4
    x48 = x27**3
    x49 = x33*x48
    x50 = x27**4
    x51 = x30**4/(x29**4*x32**4)
    x52 = x50*x51
    x53 = x28*x35
    x54 = x30**3/(x29**3*x32**3)
    x55 = x54*x6
    x56 = x22*x28
    x57 = x12**(-3/2)
    x58 = x6**5
    x59 = x23**4
    x60 = x27**5
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 5*x34 + 16*x36*x6 - 16)/tau**2 - 1/64*x24*(-208*x22*x26 + 320*x23*x6 + 64*x38 + 180*x39*x44*x45*x46*x6 - 80*x40 - 45*x43)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 + 1280*x28 + 4640*x33*x56 + 2560*x36*x38 + 256*x47 + 2880*x48*x55 - 1120*x49 + 585*x52 - 3584*x53*x6)/tau**4 + (1/1024)*x57*(-9945*x10**5*x23**5/(x12**5*x9**5) + 58500*x10**4*x59*x6/(x12**4*x9**4) - 107008*x22*x40 - 122400*x22*x43 + 59392*x23*x38 - 15616*x25*x41 - 30976*x26*x47 + 105600*x38*x39*x44*x45*x46 + 62464*x39*x6 + 86400*x41*x44*x45*x46*x6 - 21600*x42*x59 + 1024*x58)/tau**5 - 1/4096*x37*x57*(-4221440*x22*x49 + 3697200*x22*x52 + 208845*x27**6*x30**6/(x29**6*x32**6) - 733184*x27*x47 + 423680*x33*x50 + 2266880*x34*x47 + 1355776*x35*x48*x6 + 372736*x36*x58 + 4377600*x38*x48*x54 - 2695168*x38*x53 - 249856*x48 - 2534400*x50*x55 - 514800*x51*x60 + 1961984*x56 + 4096*x6**6 + 1432080*x30**5*x6*x60/(x29**5*x32**5))/tau**6)*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n7(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 7."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = x31/x32
    x36 = x27*x35
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x25*x39
    x41 = x23**3
    x42 = x10**3/(x12**3*x9**3)
    x43 = x41*x42
    x44 = x10**2
    x45 = x9**(-2)
    x46 = x12**(-2)
    x47 = x6**4
    x48 = x27**3
    x49 = x33*x48
    x50 = x27**4
    x51 = x30**4/(x29**4*x32**4)
    x52 = x50*x51
    x53 = x28*x35
    x54 = x30**3/(x29**3*x32**3)
    x55 = x54*x6
    x56 = x22*x28
    x57 = x12**(-3/2)
    x58 = x6**5
    x59 = x25*x41
    x60 = x23**4
    x61 = x42*x60
    x62 = x23**5
    x63 = x10**5/(x12**5*x9**5)
    x64 = x62*x63
    x65 = x10**4
    x66 = x9**(-4)
    x67 = x12**(-4)
    x68 = x6**6
    x69 = x27**5
    x70 = x23**6
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 5*x34 + 16*x36*x6 - 16)/tau**2 - 1/64*x24*(-208*x22*x26 + 320*x23*x6 + 64*x38 + 180*x39*x44*x45*x46*x6 - 80*x40 - 45*x43)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 + 1280*x28 + 4640*x33*x56 + 2560*x36*x38 + 256*x47 + 2880*x48*x55 - 1120*x49 + 585*x52 - 3584*x53*x6)/tau**4 + (1/1024)*x57*(-107008*x22*x40 - 122400*x22*x43 + 59392*x23*x38 - 30976*x26*x47 + 105600*x38*x39*x44*x45*x46 + 62464*x39*x6 + 86400*x41*x44*x45*x46*x6 + 1024*x58 - 15616*x59 + 58500*x6*x60*x65*x66*x67 - 21600*x61 - 9945*x64)/tau**5 - 1/4096*x37*x57*(-4221440*x22*x49 + 3697200*x22*x52 + 208845*x27**6*x30**6/(x29**6*x32**6) - 733184*x27*x47 + 423680*x33*x50 + 2266880*x34*x47 + 1355776*x35*x48*x6 + 372736*x36*x58 + 4377600*x38*x48*x54 - 2695168*x38*x53 - 249856*x48 - 2534400*x50*x55 - 514800*x51*x69 + 1961984*x56 + 4096*x68 + 1432080*x30**5*x6*x69/(x29**5*x32**5))/tau**6 - 1/16384*x46*(-5221125*x10**7*x23**7/(x12**7*x9**7) + 40933620*x10**6*x6*x70/(x12**6*x9**6) - 72265728*x22*x59 - 181762560*x22*x61 - 125863920*x22*x64 + 8896512*x23*x58 - 5672960*x25*x60 - 4476928*x26*x68 + 50970624*x38*x39 + 167946240*x38*x41*x44*x45*x46 + 190008000*x38*x60*x65*x66*x67 + 47201280*x39*x44*x45*x46*x58 - 62091264*x40*x47 + 22691840*x41*x6 - 13950720*x42*x62 - 142974720*x43*x47 + 55802880*x44*x45*x46*x6*x60 + 16384*x6**7 + 85176000*x6*x62*x65*x66*x67 - 14479920*x63*x70)/tau**7)*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n8(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 8."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = x31/x32
    x36 = x27*x35
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x25*x39
    x41 = x23**3
    x42 = x10**3/(x12**3*x9**3)
    x43 = x41*x42
    x44 = x10**2
    x45 = x9**(-2)
    x46 = x12**(-2)
    x47 = x6**4
    x48 = x27**3
    x49 = x33*x48
    x50 = x27**4
    x51 = x30**4/(x29**4*x32**4)
    x52 = x50*x51
    x53 = x28*x35
    x54 = x30**3/(x29**3*x32**3)
    x55 = x48*x6
    x56 = x22*x28
    x57 = x12**(-3/2)
    x58 = x6**5
    x59 = x25*x41
    x60 = x23**4
    x61 = x42*x60
    x62 = x23**5
    x63 = x10**5/(x12**5*x9**5)
    x64 = x62*x63
    x65 = x10**4
    x66 = x9**(-4)
    x67 = x12**(-4)
    x68 = x6**6
    x69 = x33*x50
    x70 = x27**5
    x71 = x51*x70
    x72 = x27**6
    x73 = x30**6/(x29**6*x32**6)
    x74 = x72*x73
    x75 = x50*x6
    x76 = x6*x70
    x77 = x30**5/(x29**5*x32**5)
    x78 = x28*x47
    x79 = x38*x54
    x80 = x22*x48
    x81 = x6**7
    x82 = x23**6
    x83 = x27**7
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 5*x34 + 16*x36*x6 - 16)/tau**2 - 1/64*x24*(-208*x22*x26 + 320*x23*x6 + 64*x38 + 180*x39*x44*x45*x46*x6 - 80*x40 - 45*x43)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 + 1280*x28 + 4640*x33*x56 + 2560*x36*x38 + 256*x47 - 1120*x49 + 585*x52 - 3584*x53*x6 + 2880*x54*x55)/tau**4 + (1/1024)*x57*(-107008*x22*x40 - 122400*x22*x43 + 59392*x23*x38 - 30976*x26*x47 + 105600*x38*x39*x44*x45*x46 + 62464*x39*x6 + 86400*x41*x44*x45*x46*x6 + 1024*x58 - 15616*x59 + 58500*x6*x60*x65*x66*x67 - 21600*x61 - 9945*x64)/tau**5 - 1/4096*x37*x57*(3697200*x22*x52 - 733184*x27*x47 + 2266880*x33*x78 - 4221440*x33*x80 + 1355776*x35*x55 + 372736*x36*x58 - 2695168*x38*x53 + 4377600*x48*x79 - 249856*x48 - 2534400*x54*x75 + 1961984*x56 + 4096*x68 + 423680*x69 - 514800*x71 + 208845*x74 + 1432080*x76*x77)/tau**6 - 1/16384*x46*(-5221125*x10**7*x23**7/(x12**7*x9**7) + 40933620*x10**6*x6*x82/(x12**6*x9**6) - 72265728*x22*x59 - 181762560*x22*x61 - 125863920*x22*x64 + 8896512*x23*x58 - 5672960*x25*x60 - 4476928*x26*x68 + 50970624*x38*x39 + 167946240*x38*x41*x44*x45*x46 + 190008000*x38*x60*x65*x66*x67 + 47201280*x39*x44*x45*x46*x58 - 62091264*x40*x47 + 22691840*x41*x6 - 13950720*x42*x62 - 142974720*x43*x47 + 55802880*x44*x45*x46*x6*x60 + 85176000*x6*x62*x65*x66*x67 - 14479920*x63*x82 + 16384*x81)/tau**7 + (1/65536)*x37*x46*(4385587200*x22*x69 - 8390753280*x22*x71 + 4771690560*x22*x74 + 151412625*x27**8*x30**8/(x29**8*x32**8) - 107216896*x27*x68 - 251576320*x33*x70 + 966410240*x34*x68 + 3067871232*x35*x38*x48 - 805044224*x35*x75 + 53739520*x36*x81 + 8768148480*x38*x70*x77 - 5956976640*x47*x49 + 8698959360*x47*x52 + 4428103680*x48*x54*x58 - 10342563840*x50*x79 + 90767360*x50 + 522063360*x51*x72 - 1358168064*x53*x58 + 2570158080*x54*x76 + 65536*x6**8 - 3207859200*x6*x72*x77 - 467812800*x73*x83 + 1197342720*x78 - 1247019008*x80 + 1336608000*x30**7*x6*x83/(x29**7*x32**7))/tau**8)*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n9(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 9."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = x31/x32
    x36 = x27*x35
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x25*x39
    x41 = x23**3
    x42 = x10**3/(x12**3*x9**3)
    x43 = x41*x42
    x44 = x10**2
    x45 = x9**(-2)
    x46 = x12**(-2)
    x47 = x6**4
    x48 = x27**3
    x49 = x33*x48
    x50 = x27**4
    x51 = x30**4/(x29**4*x32**4)
    x52 = x50*x51
    x53 = x28*x35
    x54 = x30**3/(x29**3*x32**3)
    x55 = x48*x6
    x56 = x22*x28
    x57 = x12**(-3/2)
    x58 = x6**5
    x59 = x25*x41
    x60 = x23**4
    x61 = x42*x60
    x62 = x23**5
    x63 = x10**5/(x12**5*x9**5)
    x64 = x62*x63
    x65 = x10**4
    x66 = x9**(-4)
    x67 = x12**(-4)
    x68 = x6**6
    x69 = x33*x50
    x70 = x27**5
    x71 = x51*x70
    x72 = x27**6
    x73 = x30**6/(x29**6*x32**6)
    x74 = x72*x73
    x75 = x50*x6
    x76 = x6*x70
    x77 = x30**5/(x29**5*x32**5)
    x78 = x28*x47
    x79 = x38*x54
    x80 = x22*x48
    x81 = x6**7
    x82 = x25*x60
    x83 = x42*x62
    x84 = x23**6
    x85 = x63*x84
    x86 = x23**7
    x87 = x10**7/(x12**7*x9**7)
    x88 = x86*x87
    x89 = x10**6
    x90 = x9**(-6)
    x91 = x12**(-6)
    x92 = x6**8
    x93 = x27**7
    x94 = x23**8
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 5*x34 + 16*x36*x6 - 16)/tau**2 - 1/64*x24*(-208*x22*x26 + 320*x23*x6 + 64*x38 + 180*x39*x44*x45*x46*x6 - 80*x40 - 45*x43)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 + 1280*x28 + 4640*x33*x56 + 2560*x36*x38 + 256*x47 - 1120*x49 + 585*x52 - 3584*x53*x6 + 2880*x54*x55)/tau**4 + (1/1024)*x57*(-107008*x22*x40 - 122400*x22*x43 + 59392*x23*x38 - 30976*x26*x47 + 105600*x38*x39*x44*x45*x46 + 62464*x39*x6 + 86400*x41*x44*x45*x46*x6 + 1024*x58 - 15616*x59 + 58500*x6*x60*x65*x66*x67 - 21600*x61 - 9945*x64)/tau**5 - 1/4096*x37*x57*(3697200*x22*x52 - 733184*x27*x47 + 2266880*x33*x78 - 4221440*x33*x80 + 1355776*x35*x55 + 372736*x36*x58 - 2695168*x38*x53 + 4377600*x48*x79 - 249856*x48 - 2534400*x54*x75 + 1961984*x56 + 4096*x68 + 423680*x69 - 514800*x71 + 208845*x74 + 1432080*x76*x77)/tau**6 - 1/16384*x46*(-72265728*x22*x59 - 181762560*x22*x61 - 125863920*x22*x64 + 8896512*x23*x58 - 4476928*x26*x68 + 50970624*x38*x39 + 167946240*x38*x41*x44*x45*x46 + 190008000*x38*x60*x65*x66*x67 + 47201280*x39*x44*x45*x46*x58 - 62091264*x40*x47 + 22691840*x41*x6 - 142974720*x43*x47 + 55802880*x44*x45*x46*x6*x60 + 85176000*x6*x62*x65*x66*x67 + 40933620*x6*x84*x89*x90*x91 + 16384*x81 - 5672960*x82 - 13950720*x83 - 14479920*x85 - 5221125*x88)/tau**7 + (1/65536)*x37*x46*(4385587200*x22*x69 - 8390753280*x22*x71 + 4771690560*x22*x74 + 151412625*x27**8*x30**8/(x29**8*x32**8) - 107216896*x27*x68 - 251576320*x33*x70 + 966410240*x34*x68 + 3067871232*x35*x38*x48 - 805044224*x35*x75 + 53739520*x36*x81 + 8768148480*x38*x70*x77 - 5956976640*x47*x49 + 8698959360*x47*x52 + 4428103680*x48*x54*x58 - 10342563840*x50*x79 + 90767360*x50 + 522063360*x51*x72 - 1358168064*x53*x58 + 2570158080*x54*x76 - 3207859200*x6*x72*x77 - 467812800*x73*x93 + 1197342720*x78 - 1247019008*x80 + 65536*x92 + 1336608000*x30**7*x6*x93/(x29**7*x32**7))/tau**8 + (1/262144)*(-4996616625*x10**9*x23**9/(x12**9*x9**9) + 49057690500*x10**8*x6*x94/(x12**8*x9**8) - 67043065856*x22*x82 - 276668006400*x22*x83 - 414669265920*x22*x85 - 199488744000*x22*x88 + 1288699904*x23*x81 - 3310944256*x25*x62 - 644939776*x26*x92 + 54074015744*x38*x41 + 268532121600*x38*x44*x45*x46*x60 + 642829824000*x38*x62*x65*x66*x67 + 432259027200*x38*x84*x89*x90*x91 + 19596902400*x39*x44*x45*x46*x81 + 26520059904*x39*x58 - 28775284736*x40*x68 + 196780032000*x41*x44*x45*x46*x58 - 12544819200*x42*x84 - 132684595200*x43*x68 + 50179276800*x44*x45*x46*x6*x62 - 114261098496*x47*x59 - 514507161600*x47*x61 - 533680842240*x47*x64 + 370727884800*x58*x60*x65*x66*x67 + 262144*x6**9 + 13243777024*x6*x60 + 127685376000*x6*x65*x66*x67*x84 + 133607335680*x6*x86*x89*x90*x91 - 21706513920*x63*x86 - 17041752000*x87*x94)/(tau**9*x12**(5/2)))*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n10(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 10."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = 1/Omega_QNM
    x4 = Omega0*x3
    x5 = Omega0**4
    x6 = np.tanh(x2)
    x7 = np.tanh(x0*(t0 + x1))
    x8 = x6 - x7
    x9 = x7 - 1
    x10 = -Omega_QNM**4 + x5
    x11 = x10/x9
    x12 = x11*x8 + x5
    x13 = x12**(1/4)
    x14 = x13*x3
    x15 = Omega_QNM*tau
    x16 = (-x11*(x7 + 1) + x5)**(1/4)
    x17 = 1/x16
    x18 = Omega0*x17
    x19 = x13*x17
    x20 = tau*x16
    x21 = 1/math.sqrt(x12)
    x22 = x6**2
    x23 = x22 - 1
    x24 = 1/x12
    x25 = x11*x24
    x26 = x23*x25
    x27 = -x23
    x28 = x27**2
    x29 = -x9
    x30 = -x10
    x31 = x30/x29
    x32 = x31*x8 + x5
    x33 = x30**2/(x29**2*x32**2)
    x34 = x28*x33
    x35 = x31/x32
    x36 = x27*x35
    x37 = 1j/x32**(1/4)
    x38 = x6**3
    x39 = x23**2
    x40 = x25*x39
    x41 = x23**3
    x42 = x10**3/(x12**3*x9**3)
    x43 = x41*x42
    x44 = x10**2
    x45 = x9**(-2)
    x46 = x12**(-2)
    x47 = x6**4
    x48 = x27**3
    x49 = x33*x48
    x50 = x27**4
    x51 = x30**4/(x29**4*x32**4)
    x52 = x50*x51
    x53 = x35*x6
    x54 = x30**3/(x29**3*x32**3)
    x55 = x48*x54
    x56 = x22*x28
    x57 = x12**(-3/2)
    x58 = x6**5
    x59 = x25*x41
    x60 = x23**4
    x61 = x42*x60
    x62 = x23**5
    x63 = x10**5/(x12**5*x9**5)
    x64 = x62*x63
    x65 = x10**4
    x66 = x9**(-4)
    x67 = x12**(-4)
    x68 = x6**6
    x69 = x33*x50
    x70 = x27**5
    x71 = x51*x70
    x72 = x27**6
    x73 = x30**6/(x29**6*x32**6)
    x74 = x72*x73
    x75 = x35*x38
    x76 = x50*x6
    x77 = x6*x70
    x78 = x30**5/(x29**5*x32**5)
    x79 = x28*x47
    x80 = x22*x48
    x81 = x22*x50
    x82 = x6**7
    x83 = x25*x60
    x84 = x42*x62
    x85 = x23**6
    x86 = x63*x85
    x87 = x23**7
    x88 = x10**7/(x12**7*x9**7)
    x89 = x87*x88
    x90 = x10**6
    x91 = x9**(-6)
    x92 = x12**(-6)
    x93 = x6**8
    x94 = x33*x70
    x95 = x51*x72
    x96 = x27**7
    x97 = x73*x96
    x98 = x27**8
    x99 = x30**8/(x29**8*x32**8)
    x100 = x98*x99
    x101 = x28*x35
    x102 = x72*x78
    x103 = x30**7/(x29**7*x32**7)
    x104 = x103*x6
    x105 = x28*x68
    x106 = x47*x48
    x107 = x50*x54
    x108 = x38*x70
    x109 = x12**(-5/2)
    x110 = x6**9
    x111 = x23**8
    x112 = x27**9
    return -Ap*((1/4)*x0*x21*(-x26 + 4*x6) + 1j/x13 - 1/16*x21*x37*(32*x22 + 5*x34 + 16*x36*x6 - 16)/tau**2 - 1/64*x24*(-208*x22*x26 + 320*x23*x6 + 64*x38 + 180*x39*x44*x45*x46*x6 - 80*x40 - 45*x43)/tau**3 + (1/256)*x24*x37*(-4608*x22*x27 - 3584*x28*x53 + 1280*x28 + 4640*x33*x56 + 2560*x36*x38 + 256*x47 - 1120*x49 + 585*x52 + 2880*x55*x6)/tau**4 + (1/1024)*x57*(-107008*x22*x40 - 122400*x22*x43 + 59392*x23*x38 - 30976*x26*x47 + 105600*x38*x39*x44*x45*x46 + 62464*x39*x6 + 86400*x41*x44*x45*x46*x6 + 1024*x58 - 15616*x59 + 58500*x6*x60*x65*x66*x67 - 21600*x61 - 9945*x64)/tau**5 - 1/4096*x37*x57*(-733184*x27*x47 - 2695168*x28*x75 + 2266880*x33*x79 - 4221440*x33*x80 + 372736*x36*x58 + 4377600*x38*x55 + 1355776*x48*x53 - 249856*x48 + 3697200*x51*x81 - 2534400*x54*x76 + 1961984*x56 + 4096*x68 + 423680*x69 - 514800*x71 + 208845*x74 + 1432080*x77*x78)/tau**6 - 1/16384*x46*(-72265728*x22*x59 - 181762560*x22*x61 - 125863920*x22*x64 + 8896512*x23*x58 - 4476928*x26*x68 + 50970624*x38*x39 + 167946240*x38*x41*x44*x45*x46 + 190008000*x38*x60*x65*x66*x67 + 47201280*x39*x44*x45*x46*x58 - 62091264*x40*x47 + 22691840*x41*x6 - 142974720*x43*x47 + 55802880*x44*x45*x46*x6*x60 + 85176000*x6*x62*x65*x66*x67 + 40933620*x6*x85*x90*x91*x92 + 16384*x82 - 5672960*x83 - 13950720*x84 - 14479920*x86 - 5221125*x89)/tau**7 + (1/65536)*x37*x46*(151412625*x100 - 1358168064*x101*x58 - 3207859200*x102*x6 + 1336608000*x104*x96 + 966410240*x105*x33 - 5956976640*x106*x33 - 10342563840*x107*x38 + 8768148480*x108*x78 - 8390753280*x22*x71 + 4771690560*x22*x74 - 107216896*x27*x68 + 4385587200*x33*x81 - 805044224*x35*x76 + 53739520*x36*x82 + 8698959360*x47*x52 + 3067871232*x48*x75 + 90767360*x50 + 2570158080*x54*x77 + 4428103680*x55*x58 + 1197342720*x79 - 1247019008*x80 + 65536*x93 - 251576320*x94 + 522063360*x95 - 467812800*x97)/tau**8 + (1/262144)*x109*(-4996616625*x10**9*x23**9/(x12**9*x9**9) + 49057690500*x10**8*x111*x6/(x12**8*x9**8) + 262144*x110 - 17041752000*x111*x88 - 67043065856*x22*x83 - 276668006400*x22*x84 - 414669265920*x22*x86 - 199488744000*x22*x89 + 1288699904*x23*x82 - 3310944256*x25*x62 - 644939776*x26*x93 + 54074015744*x38*x41 + 268532121600*x38*x44*x45*x46*x60 + 642829824000*x38*x62*x65*x66*x67 + 432259027200*x38*x85*x90*x91*x92 + 19596902400*x39*x44*x45*x46*x82 + 26520059904*x39*x58 - 28775284736*x40*x68 + 196780032000*x41*x44*x45*x46*x58 - 12544819200*x42*x85 - 132684595200*x43*x68 + 50179276800*x44*x45*x46*x6*x62 - 114261098496*x47*x59 - 514507161600*x47*x61 - 533680842240*x47*x64 + 370727884800*x58*x60*x65*x66*x67 + 13243777024*x6*x60 + 127685376000*x6*x65*x66*x67*x85 + 133607335680*x6*x87*x90*x91*x92 - 21706513920*x63*x87)/tau**9 - 1/1048576*x109*x37*(9121096530000*x100*x22 - 597432467456*x101*x82 - 41029802311680*x102*x38 + 22775800320000*x103*x38*x96 - 6094932480000*x104*x98 + 566484795392*x105 - 2044473638912*x106 - 23477708390400*x107*x58 + 22822295961600*x108*x54 + 7739539456*x110*x36 - 690441570000*x112*x99 + 1998646650000*x112*x30**9*x6/(x29**9*x32**9) - 5765488967680*x22*x94 + 17950281523200*x22*x95 - 21911603051520*x22*x97 + 184874815125*x27**10*x30**10/(x29**10*x32**10) - 15473836032*x27*x93 + 217271828480*x33*x72 + 395162746880*x34*x93 + 3916437651456*x35*x48*x58 + 14174062510080*x47*x69 - 42387663052800*x47*x71 + 33684767101440*x47*x74 - 6202430586880*x49*x68 - 4295801962496*x50*x75 - 673824153600*x51*x96 + 15071103590400*x52*x68 + 695269851136*x53*x70 - 3317288140800*x54*x6*x72 + 3891540787200*x55*x82 + 29784331100160*x58*x70*x78 + 1048576*x6**10 + 6790396354560*x6*x78*x96 - 52975108096*x70 + 990266135040*x73*x98 + 1125664161792*x81)/tau**10)*np.exp(1j*(Phi_0 - x15*(-np.arctan(x14) + np.arctan(x4)) - x15*(-math.atanh(x14) + math.atanh(x4)) + x20*(np.arctan(x18) - np.arctan(x19)) + x20*(math.atanh(x18) - math.atanh(x19))))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


# -------------------------------------------------------------------------
# Dispatcher to select the correct function at runtime
# -------------------------------------------------------------------------
_function_map = {
    0: _waveform_n0,
    1: _waveform_n1,
    2: _waveform_n2,
    3: _waveform_n3,
    4: _waveform_n4,
    5: _waveform_n5,
    6: _waveform_n6,
    7: _waveform_n7,
    8: _waveform_n8,
    9: _waveform_n9,
    10: _waveform_n10,
}

def get_precomputed_waveform(n_max, t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """
    Selects and evaluates the pre-computed waveform for a specific n_max.

    This is the main function to be called from other scripts. It dispatches
    to a pre-compiled, optimized function based on the n_max chosen.

    NOTE: The 't0' parameter is ignored by 'asymptotic' models but must still be
    provided for a consistent function signature.

    Args:
        n_max (int): The desired order of the expansion.
        ... (other parameters for the waveform)

    Returns:
        numpy.ndarray: The complex waveform values.
    """
    if n_max not in _function_map:
        raise ValueError(f"Invalid n_max: {n_max}. Available values are: {list(_function_map.keys())}")

    selected_func = _function_map[n_max]
    return selected_func(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0)

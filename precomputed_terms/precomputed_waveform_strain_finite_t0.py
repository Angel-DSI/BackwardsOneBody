
# =========================================================================
# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT MANUALLY.
#
# Generated by: generate_all_waveform_modules.py
# Contains pre-computed waveform functions for n_max from 0 to 10.
# Each function is optimized with CSE and JIT-compiled with Numba.
#
# Model Used: strain_finite_t0
# =========================================================================
import numpy as np
import numba
from scipy.special import expi 
# -------------------------------------------------------------------------
# Individual implementations for each n_max value
# -------------------------------------------------------------------------

@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n0(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 0."""
    x0 = 1/Omega_QNM
    x1 = 1/tau
    x2 = -tp
    x3 = x1*(t + x2)
    x4 = Omega0*x0
    x5 = np.tanh(x3)
    x6 = 1/(np.tanh(x1*(t0 + x2)) - 1)
    x7 = x6*(x5 - 1)
    x8 = np.log(x4)
    return -1j*Ap*x0*x4**(-x7)*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x7*x8) - x4**(-2*x6)*expi(-x6*x8*(x5 + 1))) + Phi_0))*(1/((1/2)*np.exp(x3) + (1/2)*np.exp(-x3)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n1(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 1."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = 1/(np.tanh(x0*(t0 + x1)) - 1)
    x5 = 1/Omega_QNM
    x6 = Omega0*x5
    x7 = np.log(x6)
    x8 = x4*x7
    x9 = x4*(x3 - 1)
    x10 = x5*x6**(-x9)
    return -Ap*x10*(x0*x10*(x3 - x8*(x3**2 - 1)) + 1j)*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x7*x9) - x6**(-2*x4)*expi(-x8*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n2(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 2."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x7*(x3 - 1)
    x13 = x8*x9**(-x12)
    x14 = -x5
    return -Ap*x13*(x0*x13*(-x11*x5 + x3) + 1j - 1j*x9**(-2*x12)*(x10**2*x14**2/x6**2 + 4*x11*x14*x3 + 2*x4 - 1)/(Omega_QNM**2*tau**2))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x12) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n3(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 3."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x6**(-2)
    x17 = x10**2
    x18 = x5**2
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(4*x11*x15*x3 + x15**2*x16*x17 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-x10**3*x5**3/x6**3 - 5*x11*x18 - 13*x12*x4 + 9*x16*x17*x18*x3 + x3**3 + 5*x3*x5)/(Omega_QNM**3*tau**3))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n4(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 4."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x3
    x22 = x3**3
    x23 = x5**2
    x24 = x10**3/x6**3
    x25 = x15**3
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(4*x15*x21 + x20 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-5*x11*x23 - 13*x12*x4 + 9*x17*x18*x23*x3 + x22 - x24*x5**3 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(x10**4*x15**4/x6**4 + 40*x11*x15*x22 - 18*x15*x4 - 56*x16*x21 + 5*x16 - 14*x19*x25 + 58*x20*x4 + 16*x24*x25*x3 + x3**4)/(Omega_QNM**4*tau**4))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n5(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 5."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x3
    x22 = x3**3
    x23 = x5**2
    x24 = x11*x23
    x25 = x5**3
    x26 = x10**3/x6**3
    x27 = x25*x26
    x28 = x3**4
    x29 = x6**(-4)
    x30 = x10**4
    x31 = x15**3
    x32 = x5**4
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(4*x15*x21 + x20 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-13*x12*x4 + 9*x17*x18*x23*x3 + x22 - 5*x24 - x27 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(40*x11*x15*x22 + x15**4*x29*x30 - 18*x15*x4 - 56*x16*x21 + 5*x16 - 14*x19*x31 + 58*x20*x4 + 16*x26*x3*x31 + x28)/(Omega_QNM**4*tau**4) + x9**(-5*x13)*(-x10**5*x5**5/x6**5 - 61*x11*x25 - 121*x12*x28 + 330*x17*x18*x22*x23 + 270*x17*x18*x25*x3 + 58*x22*x5 + 61*x23*x3 - 418*x24*x4 - 30*x26*x32 - 170*x27*x4 + 25*x29*x3*x30*x32 + x3**5)/(Omega_QNM**5*tau**5))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n6(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 6."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x15
    x22 = x3**3
    x23 = x5**2
    x24 = x11*x23
    x25 = x5**3
    x26 = x10**3/x6**3
    x27 = x25*x26
    x28 = x3**4
    x29 = x15**4
    x30 = x6**(-4)
    x31 = x10**4
    x32 = x30*x31
    x33 = x29*x32
    x34 = x15**3
    x35 = x19*x34
    x36 = x11*x16
    x37 = x26*x3
    x38 = x16*x4
    x39 = x3**5
    x40 = x10**5/x6**5
    x41 = x5**4
    x42 = x15**5
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(x20 + 4*x21*x3 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-13*x12*x4 + 9*x17*x18*x23*x3 + x22 - 5*x24 - x27 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(-18*x15*x4 + 5*x16 + 58*x19*x38 + 40*x21*x22 + x28 - 56*x3*x36 + x33 + 16*x34*x37 - 14*x35)/(Omega_QNM**4*tau**4) + x9**(-5*x13)*(-61*x11*x25 - 121*x12*x28 + 330*x17*x18*x22*x23 + 270*x17*x18*x25*x3 + 58*x22*x5 + 61*x23*x3 - 418*x24*x4 - 30*x26*x41 - 170*x27*x4 + 25*x3*x30*x31*x41 + x39 - x40*x5**5)/(Omega_QNM**5*tau**5) - 1j*x9**(-6*x13)*(x10**6*x15**6/x6**6 + 1324*x11*x3*x34 - 179*x15*x28 + 331*x19*x29 + 1771*x20*x28 + 364*x21*x39 + 1520*x22*x26*x34 - 2632*x22*x36 - 880*x29*x37 + x3**6 + 36*x3*x40*x42 - 55*x32*x42 + 395*x33*x4 - 61*x34 - 3298*x35*x4 + 479*x38)/(Omega_QNM**6*tau**6))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n7(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 7."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x15
    x22 = x3**3
    x23 = x5**2
    x24 = x11*x23
    x25 = x5**3
    x26 = x10**3/x6**3
    x27 = x25*x26
    x28 = x3**4
    x29 = x15**4
    x30 = x6**(-4)
    x31 = x10**4
    x32 = x30*x31
    x33 = x29*x32
    x34 = x15**3
    x35 = x19*x34
    x36 = x11*x16
    x37 = x26*x3
    x38 = x16*x4
    x39 = x3**5
    x40 = x11*x25
    x41 = x5**5
    x42 = x10**5/x6**5
    x43 = x41*x42
    x44 = x5**4
    x45 = x26*x44
    x46 = x3**6
    x47 = x6**(-6)
    x48 = x10**6
    x49 = x15**5
    x50 = x5**6
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(x20 + 4*x21*x3 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-13*x12*x4 + 9*x17*x18*x23*x3 + x22 - 5*x24 - x27 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(-18*x15*x4 + 5*x16 + 58*x19*x38 + 40*x21*x22 + x28 - 56*x3*x36 + x33 + 16*x34*x37 - 14*x35)/(Omega_QNM**4*tau**4) + x9**(-5*x13)*(-121*x12*x28 + 330*x17*x18*x22*x23 + 270*x17*x18*x25*x3 + 58*x22*x5 + 61*x23*x3 - 418*x24*x4 - 170*x27*x4 + 25*x3*x30*x31*x44 + x39 - 61*x40 - x43 - 30*x45)/(Omega_QNM**5*tau**5) - 1j*x9**(-6*x13)*(1324*x11*x3*x34 + x15**6*x47*x48 - 179*x15*x28 + 331*x19*x29 + 1771*x20*x28 + 364*x21*x39 + 1520*x22*x26*x34 - 2632*x22*x36 - 880*x29*x37 + 36*x3*x42*x49 - 55*x32*x49 + 395*x33*x4 - 61*x34 - 3298*x35*x4 + 479*x38 + x46)/(Omega_QNM**6*tau**6) - x9**(-7*x13)*(-x10**7*x5**7/x6**7 - 1385*x11*x44 - 1093*x12*x46 + 32802*x17*x18*x22*x25 + 9219*x17*x18*x23*x39 + 10899*x17*x18*x3*x44 + 3111*x22*x23 + 5075*x22*x30*x31*x44 - 15159*x24*x28 + 1385*x25*x3 - 1211*x26*x41 - 12411*x27*x28 + x3**7 + 2275*x3*x30*x31*x41 + 49*x3*x47*x48*x50 + 543*x39*x5 - 17643*x4*x40 - 791*x4*x43 - 15778*x4*x45 - 91*x42*x50)/(Omega_QNM**7*tau**7))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n8(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 8."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x3
    x22 = x3**3
    x23 = x5**2
    x24 = x11*x23
    x25 = x5**3
    x26 = x10**3/x6**3
    x27 = x25*x26
    x28 = x3**4
    x29 = x15**4
    x30 = x6**(-4)
    x31 = x10**4
    x32 = x30*x31
    x33 = x29*x32
    x34 = x15**3
    x35 = x19*x34
    x36 = x11*x15
    x37 = x11*x16
    x38 = x26*x3
    x39 = x16*x4
    x40 = x3**5
    x41 = x11*x25
    x42 = x5**5
    x43 = x10**5/x6**5
    x44 = x42*x43
    x45 = x5**4
    x46 = x26*x45
    x47 = x3**6
    x48 = x15**6
    x49 = x6**(-6)
    x50 = x10**6
    x51 = x49*x50
    x52 = x48*x51
    x53 = x19*x29
    x54 = x15**5
    x55 = x32*x54
    x56 = x26*x29
    x57 = x3*x43
    x58 = x16*x28
    x59 = x26*x34
    x60 = x34*x4
    x61 = x3**7
    x62 = x10**7/x6**7
    x63 = x5**6
    x64 = x15**7
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(4*x15*x21 + x20 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-13*x12*x4 + 9*x17*x18*x23*x3 + x22 - 5*x24 - x27 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(-18*x15*x4 + 5*x16 + 58*x19*x39 + 40*x22*x36 + x28 - 56*x3*x37 + x33 + 16*x34*x38 - 14*x35)/(Omega_QNM**4*tau**4) + x9**(-5*x13)*(-121*x12*x28 + 330*x17*x18*x22*x23 + 270*x17*x18*x25*x3 + 58*x22*x5 + 61*x23*x3 - 418*x24*x4 - 170*x27*x4 + 25*x3*x30*x31*x45 + x40 - 61*x41 - x44 - 30*x46)/(Omega_QNM**5*tau**5) - 1j*x9**(-6*x13)*(-179*x15*x28 + 1771*x19*x58 - 3298*x19*x60 + 1324*x21*x34 - 2632*x22*x37 + 1520*x22*x59 - 880*x3*x56 + 395*x33*x4 - 61*x34 + 364*x36*x40 + 479*x39 + x47 + x52 + 331*x53 + 36*x54*x57 - 55*x55)/(Omega_QNM**6*tau**6) - x9**(-7*x13)*(-1385*x11*x45 - 1093*x12*x47 + 32802*x17*x18*x22*x25 + 9219*x17*x18*x23*x40 + 10899*x17*x18*x3*x45 + 3111*x22*x23 + 5075*x22*x30*x31*x45 - 15159*x24*x28 + 1385*x25*x3 - 1211*x26*x42 - 12411*x27*x28 + 2275*x3*x30*x31*x42 + 49*x3*x49*x50*x63 - 17643*x4*x41 - 791*x4*x44 - 15778*x4*x46 + 543*x40*x5 - 91*x43*x63 - x5**7*x62 + x61)/(Omega_QNM**7*tau**7) + 1j*x9**(-8*x13)*(x10**8*x15**8/x6**8 + 187248*x11*x22*x34 - 1636*x15*x47 - 12284*x19*x54 + 47188*x20*x47 - 49136*x21*x29 + 13776*x22*x43*x54 - 224448*x22*x56 + 58086*x28*x33 - 290868*x28*x35 + 1385*x29 + x3**8 + 64*x3*x62*x64 + 3486*x32*x48 + 3280*x36*x61 - 82896*x37*x40 + 55776*x38*x54 + 1428*x4*x52 + 214140*x4*x53 - 56028*x4*x55 + 96096*x40*x59 - 5040*x48*x57 - 140*x51*x64 + 18270*x58 - 19028*x60)/(Omega_QNM**8*tau**8))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n9(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 9."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x3
    x22 = x3**3
    x23 = x5**2
    x24 = x11*x23
    x25 = x5**3
    x26 = x10**3/x6**3
    x27 = x25*x26
    x28 = x3**4
    x29 = x15**4
    x30 = x6**(-4)
    x31 = x10**4
    x32 = x30*x31
    x33 = x29*x32
    x34 = x15**3
    x35 = x19*x34
    x36 = x11*x15
    x37 = x11*x16
    x38 = x26*x3
    x39 = x16*x4
    x40 = x3**5
    x41 = x11*x25
    x42 = x5**5
    x43 = x10**5/x6**5
    x44 = x42*x43
    x45 = x5**4
    x46 = x26*x45
    x47 = x3**6
    x48 = x15**6
    x49 = x6**(-6)
    x50 = x10**6
    x51 = x49*x50
    x52 = x48*x51
    x53 = x19*x29
    x54 = x15**5
    x55 = x32*x54
    x56 = x26*x29
    x57 = x3*x43
    x58 = x16*x28
    x59 = x26*x34
    x60 = x34*x4
    x61 = x3**7
    x62 = x11*x45
    x63 = x5**7
    x64 = x10**7/x6**7
    x65 = x63*x64
    x66 = x26*x42
    x67 = x5**6
    x68 = x43*x67
    x69 = x3**8
    x70 = x6**(-8)
    x71 = x10**8
    x72 = x15**7
    x73 = x5**8
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(4*x15*x21 + x20 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-13*x12*x4 + 9*x17*x18*x23*x3 + x22 - 5*x24 - x27 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(-18*x15*x4 + 5*x16 + 58*x19*x39 + 40*x22*x36 + x28 - 56*x3*x37 + x33 + 16*x34*x38 - 14*x35)/(Omega_QNM**4*tau**4) + x9**(-5*x13)*(-121*x12*x28 + 330*x17*x18*x22*x23 + 270*x17*x18*x25*x3 + 58*x22*x5 + 61*x23*x3 - 418*x24*x4 - 170*x27*x4 + 25*x3*x30*x31*x45 + x40 - 61*x41 - x44 - 30*x46)/(Omega_QNM**5*tau**5) - 1j*x9**(-6*x13)*(-179*x15*x28 + 1771*x19*x58 - 3298*x19*x60 + 1324*x21*x34 - 2632*x22*x37 + 1520*x22*x59 - 880*x3*x56 + 395*x33*x4 - 61*x34 + 364*x36*x40 + 479*x39 + x47 + x52 + 331*x53 + 36*x54*x57 - 55*x55)/(Omega_QNM**6*tau**6) - x9**(-7*x13)*(-1093*x12*x47 + 32802*x17*x18*x22*x25 + 9219*x17*x18*x23*x40 + 10899*x17*x18*x3*x45 + 3111*x22*x23 + 5075*x22*x30*x31*x45 - 15159*x24*x28 + 1385*x25*x3 - 12411*x27*x28 + 2275*x3*x30*x31*x42 + 49*x3*x49*x50*x67 - 17643*x4*x41 - 791*x4*x44 - 15778*x4*x46 + 543*x40*x5 + x61 - 1385*x62 - x65 - 1211*x66 - 91*x68)/(Omega_QNM**7*tau**7) + 1j*x9**(-8*x13)*(187248*x11*x22*x34 + x15**8*x70*x71 - 1636*x15*x47 - 12284*x19*x54 + 47188*x20*x47 - 49136*x21*x29 + 13776*x22*x43*x54 - 224448*x22*x56 + 58086*x28*x33 - 290868*x28*x35 + 1385*x29 + 64*x3*x64*x72 + 3486*x32*x48 + 3280*x36*x61 - 82896*x37*x40 + 55776*x38*x54 + 1428*x4*x52 + 214140*x4*x53 - 56028*x4*x55 + 96096*x40*x59 - 5040*x48*x57 - 140*x51*x72 + 18270*x58 - 19028*x60 + x69)/(Omega_QNM**8*tau**8) + x9**(-9*x13)*(-x10**9*x5**9/x6**9 - 50521*x11*x42 - 9841*x12*x69 + 3277980*x17*x18*x22*x45 + 239220*x17*x18*x23*x61 + 2402100*x17*x18*x25*x40 + 612540*x17*x18*x3*x42 + 206276*x22*x25 + 1073100*x22*x30*x31*x42 + 32340*x22*x49*x50*x67 + 101166*x23*x40 - 439076*x24*x47 - 68060*x26*x67 - 719860*x27*x47 - 1743486*x28*x41 - 209622*x28*x44 - 2791380*x28*x46 + x3**9 + 213150*x3*x30*x31*x67 + 50521*x3*x45 + 9996*x3*x49*x50*x63 + 81*x3*x70*x71*x73 + 618870*x30*x31*x40*x45 - 1022996*x4*x62 - 2388*x4*x65 - 1501020*x4*x66 - 162876*x4*x68 - 8526*x43*x63 + 4916*x5*x61 - 204*x64*x73)/(Omega_QNM**9*tau**9))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


@numba.jit(nopython=True, fastmath=True, cache=True)
def _waveform_n10(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """Auto-generated, CSE-optimized, JIT-compiled waveform for n_max = 10."""
    x0 = 1/tau
    x1 = -tp
    x2 = x0*(t + x1)
    x3 = np.tanh(x2)
    x4 = x3**2
    x5 = x4 - 1
    x6 = np.tanh(x0*(t0 + x1)) - 1
    x7 = 1/x6
    x8 = 1/Omega_QNM
    x9 = Omega0*x8
    x10 = np.log(x9)
    x11 = x10*x7
    x12 = x11*x5
    x13 = x7*(x3 - 1)
    x14 = x8*x9**(-x13)
    x15 = -x5
    x16 = x15**2
    x17 = x6**(-2)
    x18 = x10**2
    x19 = x17*x18
    x20 = x16*x19
    x21 = x11*x15
    x22 = x3**3
    x23 = x5**2
    x24 = x11*x23
    x25 = x5**3
    x26 = x10**3/x6**3
    x27 = x25*x26
    x28 = x3**4
    x29 = x15**4
    x30 = x6**(-4)
    x31 = x10**4
    x32 = x30*x31
    x33 = x29*x32
    x34 = x15**3
    x35 = x19*x34
    x36 = x11*x16
    x37 = x26*x3
    x38 = x16*x4
    x39 = x3**5
    x40 = x11*x25
    x41 = x5**5
    x42 = x10**5/x6**5
    x43 = x41*x42
    x44 = x5**4
    x45 = x26*x44
    x46 = x3**6
    x47 = x15**6
    x48 = x6**(-6)
    x49 = x10**6
    x50 = x48*x49
    x51 = x47*x50
    x52 = x19*x29
    x53 = x15**5
    x54 = x32*x53
    x55 = x11*x34
    x56 = x26*x29
    x57 = x3*x42
    x58 = x16*x28
    x59 = x26*x34
    x60 = x34*x4
    x61 = x3**7
    x62 = x11*x44
    x63 = x5**7
    x64 = x10**7/x6**7
    x65 = x63*x64
    x66 = x26*x41
    x67 = x5**6
    x68 = x42*x67
    x69 = x3**8
    x70 = x15**8
    x71 = x6**(-8)
    x72 = x10**8
    x73 = x71*x72
    x74 = x70*x73
    x75 = x19*x53
    x76 = x32*x47
    x77 = x15**7
    x78 = x50*x77
    x79 = x11*x29
    x80 = x3*x47
    x81 = x3*x64
    x82 = x16*x46
    x83 = x28*x34
    x84 = x29*x4
    x85 = x22*x42
    x86 = x3**9
    x87 = x10**9/x6**9
    x88 = x5**8
    x89 = x15**9
    return -Ap*x14*(x0*x14*(-x12 + x3) + 1j - 1j*x9**(-2*x13)*(x20 + 4*x21*x3 + 2*x4 - 1)/(Omega_QNM**2*tau**2) - x9**(-3*x13)*(-13*x12*x4 + 9*x17*x18*x23*x3 + x22 - 5*x24 - x27 + 5*x3*x5)/(Omega_QNM**3*tau**3) + 1j*x9**(-4*x13)*(-18*x15*x4 + 5*x16 + 58*x19*x38 + 40*x21*x22 + x28 - 56*x3*x36 + x33 + 16*x34*x37 - 14*x35)/(Omega_QNM**4*tau**4) + x9**(-5*x13)*(-121*x12*x28 + 330*x17*x18*x22*x23 + 270*x17*x18*x25*x3 + 58*x22*x5 + 61*x23*x3 - 418*x24*x4 - 170*x27*x4 + 25*x3*x30*x31*x44 + x39 - 61*x40 - x43 - 30*x45)/(Omega_QNM**5*tau**5) - 1j*x9**(-6*x13)*(-179*x15*x28 + 1771*x19*x58 - 3298*x19*x60 + 364*x21*x39 - 2632*x22*x36 + 1520*x22*x59 + 1324*x3*x55 - 880*x3*x56 + 395*x33*x4 - 61*x34 + 479*x38 + x46 + x51 + 331*x52 + 36*x53*x57 - 55*x54)/(Omega_QNM**6*tau**6) - x9**(-7*x13)*(-1093*x12*x46 + 32802*x17*x18*x22*x25 + 9219*x17*x18*x23*x39 + 10899*x17*x18*x3*x44 + 3111*x22*x23 + 5075*x22*x30*x31*x44 - 15159*x24*x28 + 1385*x25*x3 - 12411*x27*x28 + 2275*x3*x30*x31*x41 + 49*x3*x48*x49*x67 + 543*x39*x5 - 17643*x4*x40 - 791*x4*x43 - 15778*x4*x45 + x61 - 1385*x62 - x65 - 1211*x66 - 91*x68)/(Omega_QNM**7*tau**7) + 1j*x9**(-8*x13)*(-1636*x15*x46 + 47188*x19*x82 - 290868*x19*x83 + 214140*x19*x84 + 3280*x21*x61 + 187248*x22*x55 - 224448*x22*x56 + 58086*x28*x33 + 1385*x29 - 49136*x3*x79 - 82896*x36*x39 + 55776*x37*x53 + 96096*x39*x59 + 1428*x4*x51 - 56028*x4*x54 - 5040*x42*x80 + 13776*x53*x85 + 18270*x58 - 19028*x60 + x69 + x74 - 12284*x75 + 3486*x76 + 64*x77*x81 - 140*x78)/(Omega_QNM**8*tau**8) + x9**(-9*x13)*(-50521*x11*x41 - 9841*x12*x69 + 3277980*x17*x18*x22*x44 + 239220*x17*x18*x23*x61 + 2402100*x17*x18*x25*x39 + 612540*x17*x18*x3*x41 + 206276*x22*x25 + 1073100*x22*x30*x31*x41 + 32340*x22*x48*x49*x67 + 101166*x23*x39 - 439076*x24*x46 - 68060*x26*x67 - 719860*x27*x46 - 1743486*x28*x40 - 209622*x28*x43 - 2791380*x28*x45 + 213150*x3*x30*x31*x67 + 50521*x3*x44 + 9996*x3*x48*x49*x63 + 81*x3*x71*x72*x88 + 618870*x30*x31*x39*x44 - 1022996*x4*x62 - 2388*x4*x65 - 1501020*x4*x66 - 162876*x4*x68 - 8526*x42*x63 - x5**9*x87 + 4916*x5*x61 - 204*x64*x88 + x86)/(Omega_QNM**9*tau**9) - 1j*x9**(-10*x13)*(x10**10*x15**10/x6**10 + 2652244*x11*x3*x53 - 14757*x15*x69 + 663061*x19*x47 + 1205941*x20*x69 + 29524*x21*x86 + 30954720*x22*x26*x53 + 68160*x22*x64*x77 - 16387184*x22*x79 - 4499360*x26*x80 + 630042*x28*x51 + 43255806*x28*x52 - 17689830*x28*x54 + x3**10 + 100*x3*x87*x89 - 281210*x32*x77 + 6289690*x33*x46 - 18928316*x35*x46 - 2279024*x36*x61 + 2924712*x39*x42*x53 + 14940024*x39*x55 - 31843680*x39*x56 + 3765*x4*x74 - 17594876*x4*x75 + 7491270*x4*x76 - 409836*x4*x78 - 4028976*x47*x85 + 18522*x50*x70 - 50521*x53 + 666792*x57*x77 + 5278240*x59*x61 - 18240*x70*x81 - 285*x73*x89 + 540242*x82 - 1949762*x83 + 1073517*x84)/(Omega_QNM**10*tau**10))*np.exp(1j*(-1/2*Omega_QNM*tau*(expi(-x10*x13) - x9**(-2*x7)*expi(-x11*(x3 + 1))) + Phi_0))*(1/((1/2)*np.exp(x2) + (1/2)*np.exp(-x2)))


# -------------------------------------------------------------------------
# Dispatcher to select the correct function at runtime
# -------------------------------------------------------------------------
_function_map = {
    0: _waveform_n0,
    1: _waveform_n1,
    2: _waveform_n2,
    3: _waveform_n3,
    4: _waveform_n4,
    5: _waveform_n5,
    6: _waveform_n6,
    7: _waveform_n7,
    8: _waveform_n8,
    9: _waveform_n9,
    10: _waveform_n10,
}

def get_precomputed_waveform(n_max, t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0):
    """
    Selects and evaluates the pre-computed waveform for a specific n_max.

    This is the main function to be called from other scripts. It dispatches
    to a pre-compiled, optimized function based on the n_max chosen.

    NOTE: The 't0' parameter is ignored by 'asymptotic' models but must still be
    provided for a consistent function signature.

    Args:
        n_max (int): The desired order of the expansion.
        ... (other parameters for the waveform)

    Returns:
        numpy.ndarray: The complex waveform values.
    """
    if n_max not in _function_map:
        raise ValueError(f"Invalid n_max: {n_max}. Available values are: {list(_function_map.keys())}")

    selected_func = _function_map[n_max]
    return selected_func(t, t0, tp, tau, Ap, Omega0, Omega_QNM, Phi_0)
